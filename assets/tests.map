{"version":3,"sources":["dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/register-select-helper.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/start-app.js","dummy/tests/integration/components/device-selection/component-test.js","dummy/tests/test-helper.js","dummy/tests/unit/mixins/device-enumeration-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('dummy/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _dummyTestsHelpersStartApp, _dummyTestsHelpersDestroyApp) {\n  var _slice = Array.prototype.slice;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _dummyTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          var _options$beforeEach;\n\n          (_options$beforeEach = options.beforeEach).call.apply(_options$beforeEach, [this].concat(_slice.call(arguments)));\n        }\n      },\n\n      afterEach: function afterEach() {\n        (0, _dummyTestsHelpersDestroyApp['default'])(this.application);\n\n        if (options.afterEach) {\n          var _options$afterEach;\n\n          (_options$afterEach = options.afterEach).call.apply(_options$afterEach, [this].concat(_slice.call(arguments)));\n        }\n      }\n    });\n  };\n});","define('dummy/tests/helpers/register-select-helper', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = function () {\n    _ember['default'].Test.registerAsyncHelper('select', function (app, selector) {\n      for (var _len = arguments.length, texts = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        texts[_key - 2] = arguments[_key];\n      }\n\n      var $options = app.testHelpers.findWithAssert(selector + ' option');\n\n      $options.each(function () {\n        var _this = this;\n\n        var $option = _ember['default'].$(this);\n\n        _ember['default'].run(function () {\n          _this.selected = texts.some(function (text) {\n            return $option.is(':contains(\\'' + text + '\\')');\n          });\n          $option.trigger('change');\n        });\n      });\n\n      return app.testHelpers.wait();\n    });\n  };\n});","define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _dummyResolver, _dummyConfigEnvironment) {\n\n  var resolver = _dummyResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _dummyConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _dummyConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/config/environment'], function (exports, _ember, _dummyApp, _dummyConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _dummyConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs);\n\n    _ember['default'].run(function () {\n      application = _dummyApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('dummy/tests/integration/components/device-selection/component-test', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n\n  var tHelper = _ember['default'].Helper.extend({\n    compute: function compute(params) {\n      return params[0];\n    }\n  });\n\n  var andHelper = _ember['default'].Helper.extend({\n    compute: function compute(params) {\n      return params[0] && params[1];\n    }\n  });\n\n  var webrtcService = _ember['default'].Service.extend({\n    canShareAudio: true,\n    canListDevices: true,\n    canShareVideo: true,\n    cameraList: _ember['default'].A(),\n    microphoneList: _ember['default'].A(),\n    outputDeviceList: _ember['default'].A(),\n    resolutionList: _ember['default'].A()\n  });\n\n  var mockDevices = [{ deviceId: 'foobar', label: 'foobar' }, { deviceId: 'fizzbuzz', label: 'fizzbuzz' }];\n\n  var renderDefault = function renderDefault() {\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n        ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['content', 'device-selection', ['loc', [null, [2, 8], [2, 28]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n  };\n\n  (0, _emberQunit.moduleForComponent)('device-selection', 'Integration | Component | device selection', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      this.register('helper:t', tHelper);\n      this.register('helper:and', andHelper);\n      this.register('service:webrtc', webrtcService);\n      this.inject.service('webrtc', { as: 'webrtc' });\n      this.renderDefault = renderDefault.bind(this);\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value')\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.renderDefault();\n\n    assert.equal(this.$('.options').length, 1);\n  });\n\n  (0, _emberQunit.test)('it shows a message iff the browser cannot enumerate devices', function (assert) {\n    this.set('webrtc.canListDevices', false);\n    this.renderDefault();\n    assert.equal(this.$('.browser-settings-message').length, 1);\n\n    this.set('webrtc.canListDevices', true);\n    this.renderDefault();\n    assert.equal(this.$('.browser-settings-message').length, 0);\n  });\n\n  (0, _emberQunit.test)('it shows a camera select and resolution select iff there are cameras, and video is true', function (assert) {\n    return _ember['default'].run(this, function () {\n      this.get('webrtc.cameraList').pushObjects(mockDevices);\n      this.renderDefault();\n      assert.equal(this.$('select').length, 2);\n\n      this.get('webrtc.cameraList').clear();\n      this.renderDefault();\n      assert.equal(this.$('select').length, 0);\n\n      this.get('webrtc.cameraList').pushObjects(mockDevices);\n      this.render(_ember['default'].HTMLBars.template((function () {\n        return {\n          meta: {\n            'fragmentReason': {\n              'name': 'missing-wrapper',\n              'problems': ['wrong-type']\n            },\n            'revision': 'Ember@2.3.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 1,\n                'column': 0\n              },\n              'end': {\n                'line': 3,\n                'column': 6\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('\\n          ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n      ');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['inline', 'device-selection', [], ['video', false], ['loc', [null, [2, 10], [2, 42]]]]],\n          locals: [],\n          templates: []\n        };\n      })()));\n      assert.equal(this.$('select').length, 0);\n      this.get('webrtc.cameraList').clear();\n    });\n  });\n\n  (0, _emberQunit.test)('it shows microphone select iff there are microphones and audio is true', function (assert) {\n    return _ember['default'].run(this, function () {\n      this.get('webrtc.microphoneList').pushObjects(mockDevices);\n      this.renderDefault();\n      assert.equal(this.$('select').length, 1);\n\n      this.get('webrtc.microphoneList').pushObjects(mockDevices);\n      this.render(_ember['default'].HTMLBars.template((function () {\n        return {\n          meta: {\n            'fragmentReason': {\n              'name': 'missing-wrapper',\n              'problems': ['wrong-type']\n            },\n            'revision': 'Ember@2.3.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 1,\n                'column': 0\n              },\n              'end': {\n                'line': 3,\n                'column': 6\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('\\n          ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n      ');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['inline', 'device-selection', [], ['audio', false], ['loc', [null, [2, 10], [2, 42]]]]],\n          locals: [],\n          templates: []\n        };\n      })()));\n      assert.equal(this.$('select').length, 0);\n      this.get('webrtc.microphoneList').clear();\n    });\n  });\n\n  // TODO: test initial selection of the selects\n\n  // TODO: test changing value of the selects\n});","define('dummy/tests/test-helper', ['exports', 'dummy/tests/helpers/resolver', 'dummy/tests/helpers/register-select-helper', 'ember-qunit'], function (exports, _dummyTestsHelpersResolver, _dummyTestsHelpersRegisterSelectHelper, _emberQunit) {\n  (0, _dummyTestsHelpersRegisterSelectHelper['default'])();\n\n  (0, _emberQunit.setResolver)(_dummyTestsHelpersResolver['default']);\n});","define('dummy/tests/unit/mixins/device-enumeration-test', ['exports', 'ember', 'webrtc-devices/mixins/device-enumeration', 'qunit'], function (exports, _ember, _webrtcDevicesMixinsDeviceEnumeration, _qunit) {\n\n  (0, _qunit.module)('Unit | Mixin | device enumeration');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var DeviceEnumerationObject = _ember['default'].Object.extend(_webrtcDevicesMixinsDeviceEnumeration['default']);\n    var subject = DeviceEnumerationObject.create();\n    assert.ok(subject);\n  });\n\n  (0, _qunit.test)('hasCamera should by false if there are no cameras with non-default id', function (assert) {\n    var DeviceEnumerationObject = _ember['default'].Object.extend(_webrtcDevicesMixinsDeviceEnumeration['default']);\n    var subject = DeviceEnumerationObject.create();\n    assert.equal(subject.get('hasCamera'), false);\n  });\n});","/* jshint ignore:start */\n\nrequire('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChfA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}